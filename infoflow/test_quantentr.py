import numpy as np
from infoflow import quantentr as qtr


def test_quantentr():
    # x and y time series
    x = np.array(
        [133, 43, 17, 91, 169, 82, 120, 42, 49, 137, 168, 13, 11, 182, 104, 90, 124, 103, 127, 145, 34, 59, 100, 62,
         134, 35, 113, 10, 22, 164, 152, 151, 117, 19, 87, 181, 3, 126, 1, 77, 129, 14, 157, 48, 141, 138, 81, 142, 105,
         5, 150, 116, 102, 121, 106, 2, 192, 67, 51, 183, 112, 38, 162, 109, 53, 189, 94, 78, 32, 110, 187, 161, 92, 80,
         147, 194, 99, 86, 122, 24, 167, 57, 56, 4, 40, 118, 155, 172, 23, 75, 96, 125, 132, 128, 63, 89, 45, 54, 196,
         28, 83, 30, 156, 26, 7, 12, 149, 201, 71, 165, 178, 177, 197, 74, 166, 72, 8, 84, 131, 163, 158, 119, 173, 79,
         27, 39, 31, 170, 93, 20, 73, 111, 76, 190, 188, 61, 114, 140, 115, 66, 143, 41, 202, 85, 123, 46, 18, 171, 108,
         130, 6, 135, 193, 144, 175, 191, 184, 21, 60, 15, 148, 198, 185, 159, 37, 36, 88, 98, 153, 200, 97, 101, 176,
         174, 9, 68, 70, 33, 50, 107, 179, 154, 160, 44, 146, 186, 25, 199, 180, 29, 136, 47, 65, 52, 64, 58, 55, 69,
         139, 195, 16, 95]).reshape(1,202)

    y = np.array(
        [1, 2, 122, 32, 25, 78, 159, 121, 110, 66, 51, 144, 138, 36, 13, 177, 99, 85, 145, 93, 115, 147, 11, 129, 98,
         142, 130, 20, 118, 48, 61, 108, 164, 143, 119, 24, 106, 179, 5, 139, 4, 87, 155, 10, 167, 146, 171, 148, 71,
         128, 83, 8, 125, 141, 161, 105, 89, 3, 196, 44, 55, 174, 69, 35, 153, 94, 17, 193, 77, 41, 14, 92, 186, 165,
         34, 62, 131, 195, 91, 58, 113, 33, 157, 84, 76, 6, 56, 123, 183, 175, 9, 88, 100, 154, 112, 104, 72, 82, 42,
         68, 170, 38, 74, 30, 156, 27, 15, 19, 137, 201, 60, 116, 192, 181, 194, 65, 176, 64, 16, 79, 136, 200, 160,
         101, 168, 73, 23, 57, 22, 166, 95, 29, 90, 49, 114, 187, 188, 50, 81, 135, 103, 70, 173, 31, 202, 80, 133, 46,
         26, 178, 127, 120, 124, 150, 197, 151, 132, 185, 162, 18, 97, 12, 149, 199, 191, 163, 37, 53, 107, 86, 169,
         180, 102, 109, 172, 134, 7, 40, 47, 21, 96, 111, 184, 158, 189, 39, 140, 190, 59, 152, 182, 28, 126, 45, 54,
         52, 67, 75, 43, 63, 117, 198]).reshape(1,202)
    # number of quantization levels
    q = 10

    # expected output quantization levels
    xq = np.array(
        [6, 2, 0, 4, 8, 4, 5, 2, 2, 6, 8, 0, 0, 9, 5, 4, 6, 5, 6, 7, 1, 2, 4, 3, 6, 1, 5, 0, 1, 8, 7, 7, 5, 0, 4, 8, 0,
         6, 0, 3, 6, 0, 7, 2, 6, 6, 3, 7, 5, 0, 7, 5, 5, 5, 5, 0, 9, 3, 2, 9, 5, 1, 8, 5, 2, 9, 4, 3, 1, 5, 9, 7, 4, 3,
         7, 9, 4, 4, 6, 1, 8, 2, 2, 0, 1, 5, 7, 8, 1, 3, 4, 6, 6, 6, 3, 4, 2, 2, 9, 1, 4, 1, 7, 1, 0, 0, 7, 9, 3, 8, 8,
         8, 9, 3, 8, 3, 0, 4, 6, 8, 7, 5, 8, 3, 1, 1, 1, 8, 4, 0, 3, 5, 3, 9, 9, 2, 5, 6, 5, 3, 7, 1, 9, 4, 6, 2, 0, 8,
         5, 6, 0, 6, 9, 7, 8, 9, 9, 0, 2, 0, 7, 9, 9, 7, 1, 1, 4, 4, 7, 9, 4, 4, 8, 8, 0, 3, 3, 1, 2, 5, 8, 7, 7, 2, 7,
         9, 1, 9, 8, 1, 6, 2, 3, 2, 3, 2, 2, 3, 6, 9, 0, 4])
    yq = np.array(
        [0, 0, 6, 1, 1, 3, 7, 5, 5, 3, 2, 7, 6, 1, 0, 8, 4, 4, 7, 4, 5, 7, 0, 6, 4, 7, 6, 0, 5, 2, 2, 5, 8, 7, 5, 1, 5,
         8, 0, 6, 0, 4, 7, 0, 8, 7, 8, 7, 3, 6, 4, 0, 6, 6, 7, 5, 4, 0, 9, 2, 2, 8, 3, 1, 7, 4, 0, 9, 3, 1, 0, 4, 9, 8,
         1, 3, 6, 9, 4, 2, 5, 1, 7, 4, 3, 0, 2, 6, 9, 8, 0, 4, 4, 7, 5, 5, 3, 4, 2, 3, 8, 1, 3, 1, 7, 1, 0, 0, 6, 9, 2,
         5, 9, 8, 9, 3, 8, 3, 0, 3, 6, 9, 7, 4, 8, 3, 1, 2, 1, 8, 4, 1, 4, 2, 5, 9, 9, 2, 3, 6, 5, 3, 8, 1, 9, 3, 6, 2,
         1, 8, 6, 5, 6, 7, 9, 7, 6, 9, 8, 0, 4, 0, 7, 9, 9, 8, 1, 2, 5, 4, 8, 8, 5, 5, 8, 6, 0, 1, 2, 0, 4, 5, 9, 7, 9,
         1, 6, 9, 2, 7, 9, 1, 6, 2, 2, 2, 3, 3, 2, 3, 5, 9])

    # get quantization indices for x
    xq_check = qtr.quantentr(x,q)
    yq_check = qtr.quantentr(y,q)

    # check answers
    assert np.isclose(xq_check,xq).all()
    assert np.isclose(yq_check,yq).all()
